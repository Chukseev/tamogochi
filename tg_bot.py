import telebot
from telebot import types
import time
import threading
import schedule
import yaml
from working_in_the_db import (insert_user, insert_pet, insert_inventory, cheking_pet, select_pet,
                               feed_pet, cheking_user, select_inventory, select_balance, update_satiety_and_mood)
import working_in_the_minio as h

with open('config1.yaml', 'r') as file:
    config = yaml.safe_load(file)

telegram = config['telegram']

bot = telebot.TeleBot(telegram['token'])


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if cheking_user(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
    else:
        insert_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                    message.from_user.username)
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç,{message.from_user.first_name}")
        bot.send_message(message.chat.id, '/create_pet - –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞')


@bot.message_handler(commands=['create_pet'])
def creating_pet(message):
    if cheking_user(message.from_user.id):

        if cheking_pet(message.from_user.id):
            bot.send_message(message.chat.id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü')

        else:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ')
            bot.register_next_step_handler(message, pet_name)
    else:
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: \n/start')


def pet_name(message):
    if message.text[0] in ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '[', ']',
                           '{', '}', '|', '\\'[0], ';', ':', "'", '"', ',', '.', '<', '>', '/', '?', '`',
                           '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ')
        bot.register_next_step_handler(message, pet_name)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üêà‚Äç‚¨õ')
        btn2 = types.KeyboardButton('ü¶Æ')
        markup.add(btn1, btn2)

        bot.send_message(message.chat.id, '–ö–µ–º –±—É–¥–µ—Ç —Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü?', reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: finally_reg(msg, message.text))


def finally_reg(message, name):
    markup = types.ReplyKeyboardRemove()
    pet_type = 'cat' if message.text == 'üêà‚Äç‚¨õ' else 'dog' if message.text == 'ü¶Æ' else None
    if pet_type is None:
        bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–µ—Ç,–ø–æ–∫–∞ —á—Ç–æ üêà‚Äç‚¨õ, ü¶Æ', reply_markup=markup)
        bot.register_next_step_handler(message, finally_reg)
    else:
        insert_pet(message.from_user.id, name, pet_type)
        insert_inventory(message.from_user.id)
        bot.send_message(message.chat.id, '–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', reply_markup=markup)


@bot.message_handler(commands=['view'])
def view_pet(message):
    if cheking_pet(message.from_user.id):
        pet = select_pet(message.from_user.id)
        name = pet[0]
        dog_or_cat = pet[1]
        satiety = pet[2]
        mood = pet[3]
        if mood + satiety >= 170:
            if dog_or_cat == 'dog':
                image = h.get_img('2.jpg')
            elif dog_or_cat == 'cat':
                image = h.get_img('10.jpg')
        elif mood + satiety >= 140:
            if dog_or_cat == 'dog':
                image = h.get_img('1.jpg')
            elif dog_or_cat == 'cat':
                image = h.get_img('9.jpg')

        elif mood + satiety >= 90:
            if dog_or_cat == 'dog':
                image = h.get_img('5.jpg')
            elif dog_or_cat == 'cat':
                image = h.get_img('13.jpg')

        elif mood + satiety >= 40:
            if dog_or_cat == 'dog':
                image = h.get_img('7.jpg')
            elif dog_or_cat == 'cat':
                image = h.get_img('15.jpg')

        elif mood + satiety >= 0:
            if dog_or_cat == 'dog':
                image = h.get_img('8.jpg')
            elif dog_or_cat == 'cat':
                image = h.get_img('16.jpg')

        bot.send_photo(message.chat.id, image, f'–ò–º—è: <b>{name}</b>\n–°—ã—Ç–æ—Å—Ç—å: <b>{satiety}</b>\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:<b>{mood}</b>',
                       parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /create_pet')


@bot.message_handler(commands=['inventory'])
def view_inventory(message):
    if cheking_user(message.from_user.id):
        bot.send_message(message.chat.id, f'<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n{select_inventory(message.from_user.id)}',
                         parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start')


@bot.message_handler(commands=['balance'])
def view_balance(message):
    bot.send_message(message.chat.id, f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å: {select_balance(message.from_user.id)}—Ä.</b>',
                     parse_mode='html')


@bot.message_handler(commands=['feed'])
def feed(message):
    if cheking_user(message.from_user.id):

        bot.send_message(message.chat.id, f'<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n{select_inventory(message.from_user.id)}',
                         parse_mode='html')

        bot.send_message(message.chat.id, '–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ—Ä–º–∏—Ç—å: ')
        bot.register_next_step_handler(message, next_step)
    else:
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start')


def next_step(message):
    for_user = feed_pet(message.text, message.from_user.id)
    bot.send_message(message.chat.id, for_user)


schedule.every(1).hours.do(update_satiety_and_mood)


def check_schedule():
    while True:
        schedule.run_pending()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def bot_polling():
    bot.infinity_polling()  # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
if __name__ == "__main__":
    schedule_thread = threading.Thread(target=check_schedule)
    bot_thread = threading.Thread(target=bot_polling)
    schedule_thread.start()
    bot_thread.start()
